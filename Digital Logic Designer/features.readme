o Logic Gate Modeling: Implemented key logic gates such as NOT, BUFFER, NAND, AND, NOR, OR,
XNOR, and XOR.
Each gate is designed with strict input/output rules, particularly for single-input gates like NOT and
BUFFER, ensuring accurate gate behavior and preventing short-circuits.
o Graph-Based Circuit Design: Built a graph-structured system where each gate can have child gates,
sibling gates, and multiple connections.
o This supports complex, multi-level circuit configurations. Key graph features include:
▪ Gate Connectivity: Gates can be connected, disconnected, and rearranged dynamically. The
output of any gate can be linked to the input of another.
▪ Input/Output Management: Each gate's input and output are managed efficiently, including
validation of gate compatibility based on input size.
▪ Traversal & Path Mapping: Implemented traversal systems for navigating through gates,
including a path-mapping function that helps identify connections between gates.
o Gate Insertion & Manipulation: Enabled users to insert gates as children or as siblings at the same
level. Also added the capability to append gates to the right or connect them as inputs, maintaining
gate hierarchy and parent-child relationships.
o Circuit Evaluation Engine: Designed an evaluation engine that computes the output of circuits using
post-order traversal of gates. This ensures proper logical evaluation from leaf nodes to parent gates.
The system supports circuit evaluation with real-time updates based on inputs.
o File Persistence & Circuit Loading: Created a file saving/loading system that allows users to save
circuit designs and reload them.
This includes saving gate connections and wiring, enabling users to reuse complex components like
adders or multiplexers.
o Wire Management & Visualization: Users can wire outputs of one gate to the inputs of another, with
visual indicators for input/output status, ensuring clear understanding of the circuit’s logic flow.
Disconnection of wires and resizing of inputs is also supported.

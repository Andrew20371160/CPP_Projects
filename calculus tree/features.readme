o Mathematical Expression Preprocessor
Designed and implemented a custom C++ preprocessor class for validating and preparing
mathematical expressions.
▪ Developed a system to parse and preprocess mathematical expressions by tokenizing
variables, constants, functions, operators, and parentheses.
▪ Implemented error-checking mechanisms for syntax issues like mismatched parentheses,
invalid numbers (e.g., 3.-1), and improper operator placement (e.g., x+/2).
▪ Automatically inserted missing multiplication operators in cases like 2x, x(2), and adjacent
parentheses (x + y)(z + 5), ensuring a valid mathematical format.
▪ Enforced correct function syntax, ensuring operators and parentheses were properly used
(e.g., sin(x) instead of sinx).
▪ Provided robust handling of errors in real-time, preventing downstream evaluation issues and
ensuring that expressions are mathematically sound.
o Expression Parsing: The library parses mathematical expressions and constructs the corresponding
calculus trees. It handles variables, constants, operators, functions, and parentheses.
o Numerical and Symbolic Evaluation: The library evaluates the value of a calculus tree given specific
variable assignments. It can handle both numerical and symbolic expressions.
o Symbolic Differentiation: Users can compute derivatives of expressions with respect to specified
variables, supporting complex expressions.
o Simplification: The library simplifies mathematical expressions by applying algebraic rules, combining
like terms, and performing symbolic reductions.
o Gradient Calculation: It calculates the gradient of a function, returning a vector of partial derivatives
with respect to independent variables.
o Curl and Divergence: For vector fields, the library computes both the curl and divergence operators.
o Laplacian: It computes the Laplacian operator, a second-order differential operator, commonly used
in physics and engineering applications.
o Independent Variables Detection: The library identifies and extracts independent variables present in
an expression, enabling flexible analysis and manipulation.
o Expression Manipulation: Users can perform arithmetic operations (addition, subtraction,
multiplication, division, exponentiation) on calculus trees.
o File I/O: The library provides functions to load mathematical expressions from a file and save them
back, allowing persistent storage of complex expressions.
o Customization: The library is flexible and extensible, allowing users to define custom functions and
constants as needed. It also supports operator overloading, enabling intuitive manipulation of
expressions.
o Complex Number Support: The library can be configured to handle complex numbers.
o Implemented optimized Simpson's Rule (1/3 and 3/8) for numerical integration, reducing memory
usage and improving traversal efficiency by dynamically adjusting array size for large interval
computations.
